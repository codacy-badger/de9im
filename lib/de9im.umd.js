!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@turf/turf")):"function"==typeof define&&define.amd?define(["exports","@turf/turf"],t):t((n=n||self).de9im={},n.turf)}(this,function(n,t){"use strict";t=t&&t.hasOwnProperty("default")?t.default:t;var e=i,r=i;function i(n,t,e){e=e||2;var r,i,l,u,c,h,y,x=t&&t.length,d=x?t[0]*e:n.length,v=o(n,0,d,e,!0),m=[];if(!v||v.next===v.prev)return m;if(x&&(v=function(n,t,e,r){var i,a,l,u,c,h=[];for(i=0,a=t.length;i<a;i++)l=t[i]*r,u=i<a-1?t[i+1]*r:n.length,(c=o(n,l,u,r,!1))===c.next&&(c.steiner=!0),h.push(g(c));for(h.sort(f),i=0;i<h.length;i++)p(h[i],e),e=s(e,e.next);return e}(n,t,v,e)),n.length>80*e){r=l=n[0],i=u=n[1];for(var P=e;P<d;P+=e)(c=n[P])<r&&(r=c),(h=n[P+1])<i&&(i=h),c>l&&(l=c),h>u&&(u=h);y=0!==(y=Math.max(l-r,u-i))?1/y:0}return a(v,m,e,r,i,y),m}function o(n,t,e,r,i){var o,s;if(i===I(n,t,e,r)>0)for(o=t;o<e;o+=r)s=w(o,n[o],n[o+1],s);else for(o=e-r;o>=t;o-=r)s=w(o,n[o],n[o+1],s);return s&&m(s,s.next)&&(L(s),s=s.next),s}function s(n,t){if(!n)return n;t||(t=n);var e,r=n;do{if(e=!1,r.steiner||!m(r,r.next)&&0!==v(r.prev,r,r.next))r=r.next;else{if(L(r),(r=t=r.prev)===r.next)break;e=!0}}while(e||r!==t);return t}function a(n,t,e,r,i,o,f){if(n){!f&&o&&function(n,t,e,r){var i=n;do{null===i.z&&(i.z=y(i.x,i.y,t,e,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==n);i.prevZ.nextZ=null,i.prevZ=null,function(n){var t,e,r,i,o,s,a,l,u=1;do{for(e=n,n=null,o=null,s=0;e;){for(s++,r=e,a=0,t=0;t<u&&(a++,r=r.nextZ);t++);for(l=u;a>0||l>0&&r;)0!==a&&(0===l||!r||e.z<=r.z)?(i=e,e=e.nextZ,a--):(i=r,r=r.nextZ,l--),o?o.nextZ=i:n=i,i.prevZ=o,o=i;e=r}o.nextZ=null,u*=2}while(s>1)}(i)}(n,r,i,o);for(var p,g,x=n;n.prev!==n.next;)if(p=n.prev,g=n.next,o?u(n,r,i,o):l(n))t.push(p.i/e),t.push(n.i/e),t.push(g.i/e),L(n),n=g.next,x=g.next;else if((n=g)===x){f?1===f?a(n=c(n,t,e),t,e,r,i,o,2):2===f&&h(n,t,e,r,i,o):a(s(n),t,e,r,i,o,1);break}}}function l(n){var t=n.prev,e=n,r=n.next;if(v(t,e,r)>=0)return!1;for(var i=n.next.next;i!==n.prev;){if(x(t.x,t.y,e.x,e.y,r.x,r.y,i.x,i.y)&&v(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function u(n,t,e,r){var i=n.prev,o=n,s=n.next;if(v(i,o,s)>=0)return!1;for(var a=i.x<o.x?i.x<s.x?i.x:s.x:o.x<s.x?o.x:s.x,l=i.y<o.y?i.y<s.y?i.y:s.y:o.y<s.y?o.y:s.y,u=i.x>o.x?i.x>s.x?i.x:s.x:o.x>s.x?o.x:s.x,c=i.y>o.y?i.y>s.y?i.y:s.y:o.y>s.y?o.y:s.y,h=y(a,l,t,e,r),f=y(u,c,t,e,r),p=n.prevZ,g=n.nextZ;p&&p.z>=h&&g&&g.z<=f;){if(p!==n.prev&&p!==n.next&&x(i.x,i.y,o.x,o.y,s.x,s.y,p.x,p.y)&&v(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,g!==n.prev&&g!==n.next&&x(i.x,i.y,o.x,o.y,s.x,s.y,g.x,g.y)&&v(g.prev,g,g.next)>=0)return!1;g=g.nextZ}for(;p&&p.z>=h;){if(p!==n.prev&&p!==n.next&&x(i.x,i.y,o.x,o.y,s.x,s.y,p.x,p.y)&&v(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;g&&g.z<=f;){if(g!==n.prev&&g!==n.next&&x(i.x,i.y,o.x,o.y,s.x,s.y,g.x,g.y)&&v(g.prev,g,g.next)>=0)return!1;g=g.nextZ}return!0}function c(n,t,e){var r=n;do{var i=r.prev,o=r.next.next;!m(i,o)&&P(i,r,r.next,o)&&S(i,o)&&S(o,i)&&(t.push(i.i/e),t.push(r.i/e),t.push(o.i/e),L(r),L(r.next),r=n=o),r=r.next}while(r!==n);return r}function h(n,t,e,r,i,o){var l=n;do{for(var u=l.next.next;u!==l.prev;){if(l.i!==u.i&&d(l,u)){var c=b(l,u);return l=s(l,l.next),c=s(c,c.next),a(l,t,e,r,i,o),void a(c,t,e,r,i,o)}u=u.next}l=l.next}while(l!==n)}function f(n,t){return n.x-t.x}function p(n,t){if(t=function(n,t){var e,r=t,i=n.x,o=n.y,s=-1/0;do{if(o<=r.y&&o>=r.next.y&&r.next.y!==r.y){var a=r.x+(o-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(a<=i&&a>s){if(s=a,a===i){if(o===r.y)return r;if(o===r.next.y)return r.next}e=r.x<r.next.x?r:r.next}}r=r.next}while(r!==t);if(!e)return null;if(i===s)return e.prev;var l,u=e,c=e.x,h=e.y,f=1/0;r=e.next;for(;r!==u;)i>=r.x&&r.x>=c&&i!==r.x&&x(o<h?i:s,o,c,h,o<h?s:i,o,r.x,r.y)&&((l=Math.abs(o-r.y)/(i-r.x))<f||l===f&&r.x>e.x)&&S(r,n)&&(e=r,f=l),r=r.next;return e}(n,t)){var e=b(t,n);s(e,e.next)}}function y(n,t,e,r,i){return(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-e)*i)|n<<8))|n<<4))|n<<2))|n<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-r)*i)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function g(n){var t=n,e=n;do{(t.x<e.x||t.x===e.x&&t.y<e.y)&&(e=t),t=t.next}while(t!==n);return e}function x(n,t,e,r,i,o,s,a){return(i-s)*(t-a)-(n-s)*(o-a)>=0&&(n-s)*(r-a)-(e-s)*(t-a)>=0&&(e-s)*(o-a)-(i-s)*(r-a)>=0}function d(n,t){return n.next.i!==t.i&&n.prev.i!==t.i&&!function(n,t){var e=n;do{if(e.i!==n.i&&e.next.i!==n.i&&e.i!==t.i&&e.next.i!==t.i&&P(e,e.next,n,t))return!0;e=e.next}while(e!==n);return!1}(n,t)&&S(n,t)&&S(t,n)&&function(n,t){var e=n,r=!1,i=(n.x+t.x)/2,o=(n.y+t.y)/2;do{e.y>o!=e.next.y>o&&e.next.y!==e.y&&i<(e.next.x-e.x)*(o-e.y)/(e.next.y-e.y)+e.x&&(r=!r),e=e.next}while(e!==n);return r}(n,t)}function v(n,t,e){return(t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y)}function m(n,t){return n.x===t.x&&n.y===t.y}function P(n,t,e,r){return!!(m(n,t)&&m(e,r)||m(n,r)&&m(e,t))||v(n,t,e)>0!=v(n,t,r)>0&&v(e,r,n)>0!=v(e,r,t)>0}function S(n,t){return v(n.prev,n,n.next)<0?v(n,t,n.next)>=0&&v(n,n.prev,t)>=0:v(n,t,n.prev)<0||v(n,n.next,t)<0}function b(n,t){var e=new M(n.i,n.x,n.y),r=new M(t.i,t.x,t.y),i=n.next,o=t.prev;return n.next=t,t.prev=n,e.next=i,i.prev=e,r.next=e,e.prev=r,o.next=r,r.prev=o,r}function w(n,t,e,r){var i=new M(n,t,e);return r?(i.next=r.next,i.prev=r,r.next.prev=i,r.next=i):(i.prev=i,i.next=i),i}function L(n){n.next.prev=n.prev,n.prev.next=n.next,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function M(n,t,e){this.i=n,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function I(n,t,e,r){for(var i=0,o=t,s=e-r;o<e;o+=r)i+=(n[s]-n[o])*(n[o+1]+n[s+1]),s=o;return i}i.deviation=function(n,t,e,r){var i=t&&t.length,o=i?t[0]*e:n.length,s=Math.abs(I(n,0,o,e));if(i)for(var a=0,l=t.length;a<l;a++){var u=t[a]*e,c=a<l-1?t[a+1]*e:n.length;s-=Math.abs(I(n,u,c,e))}var h=0;for(a=0;a<r.length;a+=3){var f=r[a]*e,p=r[a+1]*e,y=r[a+2]*e;h+=Math.abs((n[f]-n[y])*(n[p+1]-n[f+1])-(n[f]-n[p])*(n[y+1]-n[f+1]))}return 0===s&&0===h?0:Math.abs((h-s)/s)},i.flatten=function(n){for(var t=n[0][0].length,e={vertices:[],holes:[],dimensions:t},r=0,i=0;i<n.length;i++){for(var o=0;o<n[i].length;o++)for(var s=0;s<t;s++)e.vertices.push(n[i][o][s]);i>0&&(r+=n[i-1].length,e.holes.push(r))}return e},e.default=r;var E=n=>{const r=[];return t.flattenEach(n,n=>{const i=(n=>{const r=e.flatten(n.geometry.coordinates),i=e(r.vertices,r.holes,r.dimensions),o=[],s=i.length/3;for(let n=0;n<s;++n){const e=[];for(let t=0;t<3;++t){const o=[];for(let e=0;e<r.dimensions;++e){const s=r.dimensions*i[3*n+t]+e;o.push(r.vertices[s])}e.push(o)}e.push(e[0]),o.push(t.polygon([e]))}return t.featureCollection(o)})(n);t.featureEach(i,n=>{r.push(n)})}),t.featureCollection(r)};const j=(n,e)=>{const r=[];let i=X(n,e);i&&Array.prototype.push.apply(r,i);let o=B(n,e);return o&&Array.prototype.push.apply(r,o),0==r.length&&r.push(n),t.featureCollection(r)},B=(n,e)=>{const r=[];try{const i=t.difference(n,e);if(null===i)return null;i&&i.geometry.type.includes("Polygon")&&t.flattenEach(i,n=>{t.featureEach(E(n),n=>{r.push(n)})})}catch(n){return null}return r},X=(n,e)=>{const r=[];try{const i=t.intersect(n,e);if(null===i)return null;i&&i.geometry.type.includes("Polygon")&&t.flattenEach(i,n=>{t.featureEach(E(n),n=>{r.push(n)})})}catch(n){return null}return r};var Y={segment:(n,e)=>{const r=n.geometry.coordinates.concat(),i=t.lineIntersect(n,e);return t.coordEach(i,n=>{r.push(n)}),t.coordEach(e,e=>{t.booleanPointOnLine(e,n,{ignoreEndVertices:!0})&&r.push(e)}),r.length>=2&&r.sort((e,r)=>{const i=n.geometry.coordinates[0];return t.distance(e,i)-t.distance(r,i)}),t.lineString(r)},triangle:(n,e)=>{let r=[n];return t.featureEach(e,(n,e)=>{const i=[];for(let e=0;e<r.length;e++){const o=j(r[e],n);t.featureEach(o,n=>{i.push(n)})}r=i}),t.featureCollection(r)}};var $={centroids:n=>{const e=[];return t.segmentEach(n,n=>{e.push(t.centroid(n))}),t.featureCollection(e)},disjoint:(n,e)=>{const r=n.bbox?n.bbox:t.bbox(n),i=e.bbox?e.bbox:t.bbox(e);return r[0]>i[2]||r[2]<i[0]||r[1]>i[3]||r[3]<i[1]},similar:(n,t,e=0,r=0,i=-1,o=!1)=>{if(n.length!==t.length)return!1;const s=n.length-1;i<0&&(i=s),i=Math.min(s,Math.max(i,0));for(let a=0;a<i;a+=1){const i=(r+(o?-a:a)+s)%s;if(!1===n[(e+a+s)%s].every((n,e)=>n===t[i][e]))return!1}return!0}};var _={type:n=>{const e=t.getType(n);return!1===["Collection","Multi"].some(n=>e.includes(n))?e:t.flattenReduce(n,(n,e,r)=>{if("Mixed"===n)return n;const i=t.getType(e);return"Unknown"!==n&&n!==i?"Mixed":i},"Unknown")}};const Z=(n,t,e)=>e(n,(n,e)=>n&&t(e),!0),O=(n,t,e)=>e(n,(n,e)=>n||t(e),!1);var C={coordEvery:(n,e)=>Z(n,e,t.coordReduce),coordSome:(n,e)=>O(n,e,t.coordReduce),featureEvery:(n,e)=>Z(n,e,t.featureReduce),featureSome:(n,e)=>O(n,e,t.featureReduce),flattenEvery:(n,e)=>Z(n,e,t.flattenReduce),flattenSome:(n,e)=>O(n,e,t.flattenReduce),segmentEvery:(n,e)=>Z(n,e,t.segmentReduce),segmentSome:(n,e)=>O(n,e,t.segmentReduce)};function R(n,t,e,r,i){!function n(t,e,r,i,o){for(;i>r;){if(i-r>600){var s=i-r+1,a=e-r+1,l=Math.log(s),u=.5*Math.exp(2*l/3),c=.5*Math.sqrt(l*u*(s-u)/s)*(a-s/2<0?-1:1),h=Math.max(r,Math.floor(e-a*u/s+c)),f=Math.min(i,Math.floor(e+(s-a)*u/s+c));n(t,e,h,f,o)}var p=t[e],y=r,g=i;for(A(t,r,e),o(t[i],p)>0&&A(t,r,i);y<g;){for(A(t,y,g),y++,g--;o(t[y],p)<0;)y++;for(;o(t[g],p)>0;)g--}0===o(t[r],p)?A(t,r,g):A(t,++g,i),g<=e&&(r=g+1),e<=g&&(i=g-1)}}(n,t,e||0,r||n.length-1,i||F)}function A(n,t,e){var r=n[t];n[t]=n[e],n[e]=r}function F(n,t){return n<t?-1:n>t?1:0}function k(n,t){if(!(this instanceof k))return new k(n,t);this._maxEntries=Math.max(4,n||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),t&&this._initFormat(t),this.clear()}function T(n,t,e){if(!e)return t.indexOf(n);for(var r=0;r<t.length;r++)if(e(n,t[r]))return r;return-1}function z(n,t){D(n,0,n.children.length,t,n)}function D(n,t,e,r,i){i||(i=K(null)),i.minX=1/0,i.minY=1/0,i.maxX=-1/0,i.maxY=-1/0;for(var o,s=t;s<e;s++)o=n.children[s],J(i,n.leaf?r(o):o);return i}function J(n,t){return n.minX=Math.min(n.minX,t.minX),n.minY=Math.min(n.minY,t.minY),n.maxX=Math.max(n.maxX,t.maxX),n.maxY=Math.max(n.maxY,t.maxY),n}function N(n,t){return n.minX-t.minX}function q(n,t){return n.minY-t.minY}function G(n){return(n.maxX-n.minX)*(n.maxY-n.minY)}function U(n){return n.maxX-n.minX+(n.maxY-n.minY)}function V(n,t){return n.minX<=t.minX&&n.minY<=t.minY&&t.maxX<=n.maxX&&t.maxY<=n.maxY}function H(n,t){return t.minX<=n.maxX&&t.minY<=n.maxY&&t.maxX>=n.minX&&t.maxY>=n.minY}function K(n){return{children:n,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function Q(n,t,e,r,i){for(var o,s=[t,e];s.length;)(e=s.pop())-(t=s.pop())<=r||(R(n,o=t+Math.ceil((e-t)/r/2)*r,t,e,i),s.push(t,o,o,e))}function W(n){var t=k(n);return t.insert=function(n){if(Array.isArray(n)){var t=n;(n=nn(t)).bbox=t}else n.bbox=n.bbox?n.bbox:tn(n);return k.prototype.insert.call(this,n)},t.load=function(n){var t=[];return Array.isArray(n)?n.forEach(function(n){var e=nn(n);e.bbox=n,t.push(e)}):function(n,t){if("Feature"===n.type)t(n,0);else if("FeatureCollection"===n.type)for(var e=0;e<n.features.length;e++)t(n.features[e],e)}(n,function(n){n.bbox=n.bbox?n.bbox:tn(n),t.push(n)}),k.prototype.load.call(this,t)},t.remove=function(n){if(Array.isArray(n)){var t=n;(n=nn(t)).bbox=t}return k.prototype.remove.call(this,n)},t.clear=function(){return k.prototype.clear.call(this)},t.search=function(n){return{type:"FeatureCollection",features:k.prototype.search.call(this,this.toBBox(n))}},t.collides=function(n){return k.prototype.collides.call(this,this.toBBox(n))},t.all=function(){return{type:"FeatureCollection",features:k.prototype.all.call(this)}},t.toJSON=function(){return k.prototype.toJSON.call(this)},t.fromJSON=function(n){return k.prototype.fromJSON.call(this,n)},t.toBBox=function(n){var t;return{minX:(t=n.bbox?n.bbox:Array.isArray(n)&&4===n.length?n:tn(n))[0],minY:t[1],maxX:t[2],maxY:t[3]}},t}function nn(n){var t=[n[0],n[1]],e=[n[0],n[3]],r=[n[2],n[3]];return{type:"Feature",bbox:n,properties:{},geometry:{type:"Polygon",coordinates:[[t,[n[2],n[1]],r,e,t]]}}}function tn(n){var t=[1/0,1/0,-1/0,-1/0];return function n(t,e,r){if(null!==t)for(var i,o,s,a,l,u,c,h,f=0,p=0,y=t.type,g="FeatureCollection"===y,x="Feature"===y,d=g?t.features.length:1,v=0;v<d;v++){l=(h=!!(c=g?t.features[v].geometry:x?t.geometry:t)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var m=0;m<l;m++){var P=0,S=0;if(null!==(a=h?c.geometries[m]:c)){u=a.coordinates;var b=a.type;switch(f=!r||"Polygon"!==b&&"MultiPolygon"!==b?0:1,b){case null:break;case"Point":e(u,p,v,P,S),p++,P++;break;case"LineString":case"MultiPoint":for(i=0;i<u.length;i++)e(u[i],p,v,P,S),p++,"MultiPoint"===b&&P++;"LineString"===b&&P++;break;case"Polygon":case"MultiLineString":for(i=0;i<u.length;i++){for(o=0;o<u[i].length-f;o++)e(u[i][o],p,v,P,S),p++;"MultiLineString"===b&&P++,"Polygon"===b&&S++}"Polygon"===b&&P++;break;case"MultiPolygon":for(i=0;i<u.length;i++){for("MultiPolygon"===b&&(S=0),o=0;o<u[i].length;o++){for(s=0;s<u[i][o].length-f;s++)e(u[i][o][s],p,v,P,S),p++;S++}P++}break;case"GeometryCollection":for(i=0;i<a.geometries.length;i++)n(a.geometries[i],e,r);break;default:throw new Error("Unknown Geometry Type")}}}}}(n,function(n){t[0]>n[0]&&(t[0]=n[0]),t[1]>n[1]&&(t[1]=n[1]),t[2]<n[0]&&(t[2]=n[0]),t[3]<n[1]&&(t[3]=n[1])}),t}k.prototype={all:function(){return this._all(this.data,[])},search:function(n){var t=this.data,e=[],r=this.toBBox;if(!H(n,t))return e;for(var i,o,s,a,l=[];t;){for(i=0,o=t.children.length;i<o;i++)s=t.children[i],H(n,a=t.leaf?r(s):s)&&(t.leaf?e.push(s):V(n,a)?this._all(s,e):l.push(s));t=l.pop()}return e},collides:function(n){var t=this.data,e=this.toBBox;if(!H(n,t))return!1;for(var r,i,o,s,a=[];t;){for(r=0,i=t.children.length;r<i;r++)if(o=t.children[r],H(n,s=t.leaf?e(o):o)){if(t.leaf||V(n,s))return!0;a.push(o)}t=a.pop()}return!1},load:function(n){if(!n||!n.length)return this;if(n.length<this._minEntries){for(var t=0,e=n.length;t<e;t++)this.insert(n[t]);return this}var r=this._build(n.slice(),0,n.length-1,0);if(this.data.children.length)if(this.data.height===r.height)this._splitRoot(this.data,r);else{if(this.data.height<r.height){var i=this.data;this.data=r,r=i}this._insert(r,this.data.height-r.height-1,!0)}else this.data=r;return this},insert:function(n){return n&&this._insert(n,this.data.height-1),this},clear:function(){return this.data=K([]),this},remove:function(n,t){if(!n)return this;for(var e,r,i,o,s=this.data,a=this.toBBox(n),l=[],u=[];s||l.length;){if(s||(s=l.pop(),r=l[l.length-1],e=u.pop(),o=!0),s.leaf&&-1!==(i=T(n,s.children,t)))return s.children.splice(i,1),l.push(s),this._condense(l),this;o||s.leaf||!V(s,a)?r?(e++,s=r.children[e],o=!1):s=null:(l.push(s),u.push(e),e=0,r=s,s=s.children[0])}return this},toBBox:function(n){return n},compareMinX:N,compareMinY:q,toJSON:function(){return this.data},fromJSON:function(n){return this.data=n,this},_all:function(n,t){for(var e=[];n;)n.leaf?t.push.apply(t,n.children):e.push.apply(e,n.children),n=e.pop();return t},_build:function(n,t,e,r){var i,o=e-t+1,s=this._maxEntries;if(o<=s)return z(i=K(n.slice(t,e+1)),this.toBBox),i;r||(r=Math.ceil(Math.log(o)/Math.log(s)),s=Math.ceil(o/Math.pow(s,r-1))),(i=K([])).leaf=!1,i.height=r;var a,l,u,c,h=Math.ceil(o/s),f=h*Math.ceil(Math.sqrt(s));for(Q(n,t,e,f,this.compareMinX),a=t;a<=e;a+=f)for(Q(n,a,u=Math.min(a+f-1,e),h,this.compareMinY),l=a;l<=u;l+=h)c=Math.min(l+h-1,u),i.children.push(this._build(n,l,c,r-1));return z(i,this.toBBox),i},_chooseSubtree:function(n,t,e,r){for(var i,o,s,a,l,u,c,h,f,p;r.push(t),!t.leaf&&r.length-1!==e;){for(c=h=1/0,i=0,o=t.children.length;i<o;i++)l=G(s=t.children[i]),f=n,p=s,(u=(Math.max(p.maxX,f.maxX)-Math.min(p.minX,f.minX))*(Math.max(p.maxY,f.maxY)-Math.min(p.minY,f.minY))-l)<h?(h=u,c=l<c?l:c,a=s):u===h&&l<c&&(c=l,a=s);t=a||t.children[0]}return t},_insert:function(n,t,e){var r=this.toBBox,i=e?n:r(n),o=[],s=this._chooseSubtree(i,this.data,t,o);for(s.children.push(n),J(s,i);t>=0&&o[t].children.length>this._maxEntries;)this._split(o,t),t--;this._adjustParentBBoxes(i,o,t)},_split:function(n,t){var e=n[t],r=e.children.length,i=this._minEntries;this._chooseSplitAxis(e,i,r);var o=this._chooseSplitIndex(e,i,r),s=K(e.children.splice(o,e.children.length-o));s.height=e.height,s.leaf=e.leaf,z(e,this.toBBox),z(s,this.toBBox),t?n[t-1].children.push(s):this._splitRoot(e,s)},_splitRoot:function(n,t){this.data=K([n,t]),this.data.height=n.height+1,this.data.leaf=!1,z(this.data,this.toBBox)},_chooseSplitIndex:function(n,t,e){var r,i,o,s,a,l,u,c,h,f,p,y,g,x;for(l=u=1/0,r=t;r<=e-t;r++)i=D(n,0,r,this.toBBox),o=D(n,r,e,this.toBBox),h=i,f=o,p=void 0,y=void 0,g=void 0,x=void 0,p=Math.max(h.minX,f.minX),y=Math.max(h.minY,f.minY),g=Math.min(h.maxX,f.maxX),x=Math.min(h.maxY,f.maxY),s=Math.max(0,g-p)*Math.max(0,x-y),a=G(i)+G(o),s<l?(l=s,c=r,u=a<u?a:u):s===l&&a<u&&(u=a,c=r);return c},_chooseSplitAxis:function(n,t,e){var r=n.leaf?this.compareMinX:N,i=n.leaf?this.compareMinY:q;this._allDistMargin(n,t,e,r)<this._allDistMargin(n,t,e,i)&&n.children.sort(r)},_allDistMargin:function(n,t,e,r){n.children.sort(r);var i,o,s=this.toBBox,a=D(n,0,t,s),l=D(n,e-t,e,s),u=U(a)+U(l);for(i=t;i<e-t;i++)o=n.children[i],J(a,n.leaf?s(o):o),u+=U(a);for(i=e-t-1;i>=t;i--)o=n.children[i],J(l,n.leaf?s(o):o),u+=U(l);return u},_adjustParentBBoxes:function(n,t,e){for(var r=e;r>=0;r--)J(t[r],n)},_condense:function(n){for(var t,e=n.length-1;e>=0;e--)0===n[e].children.length?e>0?(t=n[e-1].children).splice(t.indexOf(n[e]),1):this.clear():z(n[e],this.toBBox)},_initFormat:function(n){var t=["return a"," - b",";"];this.compareMinX=new Function("a","b",t.join(n[0])),this.compareMinY=new Function("a","b",t.join(n[1])),this.toBBox=new Function("a","return {minX: a"+n[0]+", minY: a"+n[1]+", maxX: a"+n[2]+", maxY: a"+n[3]+"};")}};const en=(n,e)=>{const r=[],i=t.lineSegment(e),o=W();o.load(i),t.segmentEach(n,n=>{const e=o.search(n),i=Y.segment(n,e),s=t.getCoords(i);Array.prototype.push.apply(r,s)});const s=r.filter((n,t)=>0===t||n.some((n,e)=>n!==r[t-1][e]));return t.lineString(s)};var rn={boundaries:(n,e)=>{let r=n;return t.flattenEach(e,n=>{const e=t.polygonToLine(n);r=en(r,e)}),r},line:en,polygon:(n,e)=>{const r=[],i=W();return i.load(e),t.featureEach(n,n=>{const t=i.search(n),e=Y.triangle(n,t);Array.prototype.push.apply(r,e.features)}),t.featureCollection(r)}};var on={isInLine:(n,e,r,i,o)=>{if(r=!1!==r,i=!1!==i,o=!1!==o,$.disjoint(n,e))return!1===o;const s=o?C.flattenSome:C.flattenEvery;return(i?C.coordEvery:C.coordSome)(n,n=>s(e,e=>t.booleanPointOnLine(n,e,{ignoreEndVertices:!1===r})===o))},isInPoint:(n,e,r,i)=>{if(r=!1!==r,i=!1!==i,$.disjoint(n,e))return!1===i;const o=i?C.flattenSome:C.flattenEvery;return(r?C.coordEvery:C.coordSome)(n,n=>{const r=t.point(n);return o(e,n=>r.geometry.coordinates.every((t,e)=>t===n.geometry.coordinates[e])===i)})},isInPolygon:(n,e,r,i,o)=>{if(r=!1!==r,i=!1!==i,o=!1!==o,$.disjoint(n,e))return!1===o;const s=o?C.flattenSome:C.flattenEvery;return(i?C.coordEvery:C.coordSome)(n,n=>s(e,e=>t.booleanPointInPolygon(n,e,{ignoreBoundary:!1===r})===o))}};const sn=n=>{const e=n.geometry.coordinates.length;return t.point(n.geometry.coordinates[e-1])},an=(n,e,r)=>(r=!1!==r,C.flattenSome(n,n=>C.flattenSome(e,e=>{const i=t.lineIntersect(n,e);if(!1===r){const r=t.featureCollection([n,e]);if(ln(r,i))return!1}return i.features.length>0}))),ln=(n,t)=>C.featureEvery(t,t=>C.flattenSome(n,n=>{const e=hn(n),r=sn(n);if(on.isInPoint(t,e)||on.isInPoint(t,r))return!0})),un=(n,e,r,i,o,s)=>{r=!1!==r,s=s||0,o=!1!==o;const a=(i=!1!==i)?C.segmentEvery:C.segmentSome;return a(n,n=>{const i=rn.line(n,e);return a(i,n=>{const i=t.centroid(n);let a=on.isInLine(i,e,r);if(!1===a&&s>0){a=t.nearestPointOnLine(e,i).properties.dist<=s}return a===o})})},cn=(n,t)=>C.flattenSome(n,n=>{const e=hn(n),r=sn(n);return C.flattenSome(t,n=>{const t=hn(n);if(on.isInPoint(e,t)||on.isInPoint(r,t))return!0;const i=sn(n);return!(!on.isInPoint(e,i)&&!on.isInPoint(r,i))||void 0})}),hn=n=>t.point(n.geometry.coordinates[0]);var fn={end:sn,isDisjoint:(n,t)=>{return!an(n,t,!0)&&!un(n,t,!0,!1,!0)&&!cn(n,t)},isIntersecting:an,isOverlapping:un,isSimilar:(n,t)=>{const e=(n,t)=>C.flattenEvery(n,n=>C.flattenSome(t,t=>{const e=n.geometry.coordinates,r=t.geometry.coordinates,i=r.length-1;return $.similar(e,r)||$.similar(e,r,0,i-1,i,!0)}));return e(n,t)&&e(t,n)},isTouching:cn,start:hn};const pn=(n,t)=>{const e=(n,t)=>C.flattenEvery(n,n=>n.geometry.coordinates.every(n=>C.flattenSome(t,t=>t.geometry.coordinates.some(t=>((n,t)=>{const e=n.length-1;for(let r=0;r<e;++r){if($.similar(n,t,0,r,1,!0)&&$.similar(n,t,0,r,e,!0))return!0;if($.similar(n,t,0,r,1,!1)&&$.similar(n,t,0,r,e,!1))return!0}return!1})(n,t)))));return e(n,t)&&e(t,n)},yn=(n,e,r,i,o)=>{if(r=!1!==r,i=!1!==i,o=!1!==o,pn(n,e))return!0===o;const s=E(n),a=E(e),l=rn.polygon(s,a);return(i?C.featureEvery:C.featureSome)(l,n=>{const i=t.centroid(n);return on.isInPolygon(i,e,r)===o})};var gn={isBoundaryIntersecting:(n,e)=>C.flattenSome(n,n=>{const r=t.polygonToLine(n);return C.flattenSome(e,n=>{const e=t.polygonToLine(n);return!1===fn.isDisjoint(r,e)})}),isInPolygon:(n,t)=>!1!==on.isInPolygon(n,t,!0,!0)&&yn(n,t,!1,!0,!0),relate:yn},xn={clipper:Y,helpers:$,invariant:_,line:fn,meta:C,partition:rn,point:on,polygon:gn,triangulate:E};var dn=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;if(xn.line.isSimilar(n,t))return!0;if(!1===xn.point.isInLine(n,t,!0,!0))return!1;return!!xn.line.isOverlapping(n,t,!1,!0,!0)},vn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.meta.flattenEvery(n,n=>{const e=xn.partition.boundaries(n,t),r=xn.helpers.centroids(e);return!1!==xn.point.isInPolygon(r,t,!0,!0)&&xn.point.isInPolygon(r,t,!1,!1)});var mn=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;return!1!==xn.point.isInLine(n,t,!0,!0)&&xn.point.isInLine(n,t,!1,!1)},Pn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.point.isInPoint(n,t,!0),Sn=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;return!1!==xn.point.isInPolygon(n,t,!0,!0)&&xn.point.isInPolygon(n,t,!1,!1)};var bn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.polygon.isInPolygon(n,t);const wn=(n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":return dn(n,t);case"LineString-Polygon":return vn(n,t);case"Point-LineString":return mn(n,t);case"Point-Point":return Pn(n,t);case"Point-Polygon":return Sn(n,t);case"Polygon-Polygon":return bn(n,t);default:throw new Error(`${e} within ${r} not supported.`)}},Ln=(n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":case"LineString-Point":case"Point-Point":case"Polygon-LineString":case"Polygon-Point":case"Polygon-Polygon":return wn(t,n);default:throw new Error(`${e} contains ${r} not supported.`)}};var Mn=(n,t)=>dn(n,t),In=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.meta.flattenEvery(n,n=>{const e=xn.partition.boundaries(n,t),r=xn.helpers.centroids(e);return xn.point.isInPolygon(r,t,!0,!0,!0)});var En=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.point.isInLine(n,t,!0,!0,!0),jn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.point.isInPoint(n,t,!0),Bn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.point.isInPolygon(n,t,!0,!0,!0);var Xn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.polygon.isInPolygon(n,t);const Yn=(n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":return Mn(n,t);case"LineString-Polygon":return In(n,t);case"Point-LineString":return En(n,t);case"Point-Point":return jn(n,t);case"Point-Polygon":return Bn(n,t);case"Polygon-Polygon":return Xn(n,t);default:throw new Error(`${e} coveredby ${r} not supported.`)}};var $n=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;return!1!==xn.point.isInLine(n,t,!1,!1,!0)&&xn.point.isInLine(n,t,!0,!1,!1)},_n=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;return!1!==xn.point.isInPolygon(n,t,!1,!1,!0)&&xn.point.isInPolygon(n,t,!0,!1,!1)};var Zn=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;return!xn.line.isOverlapping(n,t,!1,!1,!0)&&!!xn.line.isIntersecting(n,t,!1)},On=(n,t)=>$n(t,n),Cn=(n,e)=>{if(xn.helpers.disjoint(n,e))return!1;const r=t.flattenReduce(n,(n,t)=>{if(n.within&&n.outside)return n;const r=xn.partition.boundaries(t,e),i=xn.helpers.centroids(r);return!1===n.within&&(n.within=xn.point.isInPolygon(i,e,!1,!1,!0)),!1===n.outside&&(n.outside=xn.point.isInPolygon(i,e,!0,!1,!1)),n},{within:!1,outside:!1});return r.within&&r.outside};var Rn=(n,t)=>Cn(t,n),An=(n,t)=>_n(t,n);var Fn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.point.isInLine(n,t,!0,!1),kn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.point.isInPoint(n,t,!1),Tn=(n,t)=>!xn.helpers.disjoint(n,t)&&xn.point.isInPolygon(n,t,!0,!1);const zn=(n,t)=>!xn.helpers.disjoint(n,t)&&!1===xn.line.isDisjoint(n,t);var Dn=zn,Jn=(n,t)=>Fn(t,n),Nn=(n,e)=>{if(xn.helpers.disjoint(n,e))return!1;return!!xn.meta.flattenSome(e,e=>{const r=t.polygonToLine(e);return zn(r,n)})||xn.point.isInPolygon(n,e,!0,!1)};var qn=(n,t)=>Nn(t,n),Gn=(n,t)=>Tn(t,n),Un=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;return!!xn.polygon.isBoundaryIntersecting(n,t)||xn.polygon.relate(n,t,!0,!1,!0)};const Vn=(n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":return Dn(n,t);case"LineString-Point":return Jn(n,t);case"LineString-Polygon":return Nn(n,t);case"Point-LineString":return Fn(n,t);case"Point-Point":return kn(n,t);case"Point-Polygon":return Tn(n,t);case"Polygon-LineString":return qn(n,t);case"Polygon-Point":return Gn(n,t);case"Polygon-Polygon":return Un(n,t);default:throw new Error(`${e} intersects ${r} not supported.`)}};var Hn=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;if(xn.line.isSimilar(n,t))return!1;return!1!==xn.line.isOverlapping(n,t,!1,!1,!0,.02)&&!1!==xn.line.isOverlapping(n,t,!0,!1,!1,.02)&&xn.line.isOverlapping(t,n,!0,!1,!1,.02)};var Kn=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;return!1!==xn.point.isInPoint(n,t,!1,!0)&&!1!==xn.point.isInPoint(n,t,!1,!1)&&xn.point.isInPoint(t,n,!1,!1)};var Qn=(n,e)=>{if(xn.helpers.disjoint(n,e))return!1;const r=xn.triangulate(n),i=xn.triangulate(e),o=xn.partition.polygon(r,i),s=t.featureReduce(o,(n,r)=>{if(n.within&&n.outside)return n;const i=t.centroid(r);return xn.point.isInPolygon(i,e,!1)?n.within=!0:0==xn.point.isInPolygon(i,e,!0)&&(n.outside=!0),n},{within:!1,outside:!1});if(!1===(s.within&&s.outside))return!1;const a=xn.partition.polygon(i,r);return xn.meta.featureSome(a,e=>{const r=t.centroid(e);return!1===xn.point.isInPolygon(r,n,!0)})};var Wn=(n,t)=>!xn.helpers.disjoint(n,t)&&!xn.point.isInLine(n,t,!1,!1,!0)&&xn.point.isInLine(n,t,!0,!1,!0),nt=(n,t)=>!xn.helpers.disjoint(n,t)&&!xn.point.isInPolygon(n,t,!1,!1,!0)&&xn.point.isInPolygon(n,t,!0,!1,!0);var tt=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;return!xn.line.isIntersecting(n,t,!1)&&!xn.line.isOverlapping(n,t,!0,!1,!0)&&!!xn.line.isTouching(n,t)},et=(n,t)=>Wn(t,n),rt=(n,e)=>{if(xn.helpers.disjoint(n,e))return!1;const r=t.flattenReduce(n,(n,r)=>{if(n.within)return n;const i=xn.partition.boundaries(r,e),o=xn.helpers.centroids(i);return xn.point.isInPolygon(o,e,!1,!1,!0)?(n.within=!0,n):(!1===n.exterior&&xn.point.isInPolygon(o,e,!0,!1,!1)&&(n.exterior=!0),n.boundary?n:xn.point.isInPolygon(o,e,!0,!1,!0)?(n.boundary=!0,n):([xn.line.start(r),xn.line.end(r)].some(n=>xn.meta.flattenSome(e,e=>{const r=t.polygonToLine(e);return xn.meta.flattenSome(r,e=>t.booleanPointOnLine(n,e,{ignoreEndVertices:!1}))}))&&(n.boundary=!0),n))},{boundary:!1,exterior:!1,within:!1});return!1===r.within&&r.boundary&&r.exterior};var it=(n,t)=>rt(t,n),ot=(n,t)=>nt(t,n),st=(n,t)=>{if(xn.helpers.disjoint(n,t))return!1;if(xn.point.isInPolygon(n,t,!1,!1))return!1;if(xn.point.isInPolygon(t,n,!1,!1))return!1;return!1!==xn.polygon.isBoundaryIntersecting(n,t)&&xn.polygon.relate(n,t,!0,!0,!1)};n.contains=Ln,n.coveredby=Yn,n.covers=((n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":case"LineString-Point":case"Point-Point":case"Polygon-Point":case"Polygon-LineString":case"Polygon-Polygon":return Yn(t,n);default:throw new Error(`${e} covers ${r} not supported.`)}}),n.crosses=((n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":return Zn(n,t);case"LineString-Point":return On(n,t);case"LineString-Polygon":return Cn(n,t);case"Point-LineString":return $n(n,t);case"Point-Polygon":return _n(n,t);case"Polygon-LineString":return Rn(n,t);case"Polygon-Point":return An(n,t);default:throw new Error(`${e} crosses ${r} not supported.`)}}),n.disjoint=((n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":case"LineString-Point":case"LineString-Polygon":case"Point-LineString":case"Point-Point":case"Point-Polygon":case"Polygon-LineString":case"Polygon-Point":case"Polygon-Polygon":return!1===Vn(n,t);default:throw new Error(`${e} disjoint ${r} not supported.`)}}),n.equals=((n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":case"Point-Point":case"Polygon-Polygon":return wn(n,t)&&Ln(n,t);default:throw new Error(`${e} equals ${r} not supported.`)}}),n.intersects=Vn,n.overlaps=((n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":return Hn(n,t);case"Point-Point":return Kn(n,t);case"Polygon-Polygon":return Qn(n,t);default:throw new Error(`${e} overlaps ${r} not supported.`)}}),n.touches=((n,t)=>{const e=xn.invariant.type(n),r=xn.invariant.type(t);switch(`${e}-${r}`){case"LineString-LineString":return tt(n,t);case"LineString-Point":return et(n,t);case"LineString-Polygon":return rt(n,t);case"Point-LineString":return Wn(n,t);case"Point-Polygon":return nt(n,t);case"Polygon-LineString":return it(n,t);case"Polygon-Point":return ot(n,t);case"Polygon-Polygon":return st(n,t);default:throw new Error(`${e} touches ${r} not supported.`)}}),n.within=wn,Object.defineProperty(n,"__esModule",{value:!0})});//# sourceMappingURL=de9im.umd.js.map
